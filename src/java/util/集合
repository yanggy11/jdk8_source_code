1.LinkedList
底层使用双向链表实现。不存在扩容问题，查询数据需要遍历列表O(n)，插入数据较快 O(1)

2.ArrayList
底层使用数组实现，动动态扩容,查询数据O(1),插入数据需要移动数组内的元素O(n)
数组元素数量 >= 数组长度时，触发扩容，容量增为原来的1.5倍
新开辟一块存储空间，将原数组的内容复制到新的内存中去。

HashMap

底层结构：数组加链表或红黑树，Java8引入了红黑树机制
采用hash算法，将同hash值key的节点保存到同一个链表中，数组中存储每个链表中的第一个节点。

put:
1.首先根据key计算出hash值，
2.根据hash值查询新元素存储链表，
3.判断是否存在相同的key，如果存在，覆盖
3.如果不存在，将新元素存储到链表的尾部

get:
1.首先根据key计算出hash值，
2.根据hash值查询新元素存储链表，
3.循环遍历链表，找到需要的元素，若没有，返回null。

扩容：
HashMap设置了一个负载因子值，可以在创建HashMap对象时传入，
默认为0.75，当HashMap存储的元素数量size超过负载因子所表示的容量时，触发自动扩容机制。
